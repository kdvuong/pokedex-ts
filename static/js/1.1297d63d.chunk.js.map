{"version":3,"sources":["data/pokemonSummaries.ts","utils/useDeepCallback.tsx","utils/useDeepCompareRef.tsx","hooks/PokemonApiHook.ts","utils/TypeFilter.ts","assets/icons/types/bug-icon.svg","assets/icons/types/index.ts","assets/icons/types/dark-icon.svg","assets/icons/types/dragon-icon.svg","assets/icons/types/electric-icon.svg","assets/icons/types/fairy-icon.svg","assets/icons/types/fighting-icon.svg","assets/icons/types/fire-icon.svg","assets/icons/types/flying-icon.svg","assets/icons/types/ghost-icon.svg","assets/icons/types/grass-icon.svg","assets/icons/types/ground-icon.svg","assets/icons/types/ice-icon.svg","assets/icons/types/normal-icon.svg","assets/icons/types/poison-icon.svg","assets/icons/types/psychic-icon.svg","assets/icons/types/rock-icon.svg","assets/icons/types/steel-icon.svg","assets/icons/types/water-icon.svg","assets/icons/nav/index.ts","assets/icons/nav/pokeball.svg","assets/icons/nav/search.svg"],"names":["summaries","useDeepCallback","callback","dependencies","customCompare","useCallback","comparator","isEqual","dependencyList","useRef","current","useDeepCompareRef","usePokemonApi","pokemonDbApi","useDbApi","pokemonService","abilityDbApi","abilityService","moveDbApi","moveService","movesetDbApi","movesetService","typesDbApi","typeService","getAllPokemonSummaries","pokemonSummaries","getPokemonSummaryById","id","find","pokemon","getPokemonById","getById","getAbilitiesByIds","ids","getManyByIds","getMovesetById","getMovesByIds","getAllMoves","getAll","getTypesByIds","getTypeName","type","$enum","mapValue","with","Type","NORMAL","FIRE","FIGHTING","WATER","FLYING","GRASS","POISON","ELECTRIC","GROUND","PSYCHIC","ROCK","ICE","BUG","DRAGON","GHOST","DARK","STEEL","FAIRY","getTypeIcon","icons","NormalIcon","FireIcon","FightingIcon","WaterIcon","FlyingIcon","GrassIcon","PoisonIcon","ElectricIcon","GroundIcon","PsychicIcon","RockIcon","IceIcon","BugIcon","DragonIcon","GhostIcon","DarkIcon","SteelIcon","FairyIcon","getTypeIconColor","getTypePillColor","getTypeIconBoxShadow","typeNameMap","Map","forEach","set","TypeFilter","this","DEFAULT_VALUE","getValues","map","value","get","Pokeball","Search"],"mappings":"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","file":"static/js/1.1297d63d.chunk.js","sourcesContent":["import { PokemonSummary } from \"types\";\r\nimport data from \"./pokemonSummaries.json\";\r\n\r\nlet summaries = data as PokemonSummary[];\r\n\r\nexport default summaries;\r\n","import { useCallback } from \"react\";\r\n\r\nimport { useDeepCompareRef } from \"./useDeepCompareRef\";\r\n\r\n/**\r\n * A replacement for React's useCallback that'll allow for custom and deep compares.\r\n * @see {@link https://reactjs.org/docs/hooks-reference.html#usecallback}\r\n * @param callback Accepts a callback that's forwarded to React's useCallback\r\n * @param dependencies A dependency array similar to React's useCallback however it utilizes a deep compare\r\n * @param customCompare Opportunity to provide a custom compare function\r\n * @returns A memoized callback\r\n * @example\r\n * const Child = memo(function Child({onClick}) {\r\n *   console.log('Child has rendered.');\r\n *   return <button onClick={onClick}>Click me</button>;\r\n * });\r\n *\r\n * function ComponentExample() {\r\n *   const [timesClicked, setTimesClicked] = useState(0);\r\n *\r\n *   const handleClick = useDeepCallback(() => {\r\n *     setTimesClicked((timesClicked) => timesClicked + 1);\r\n *     // New reference every render\r\n *   }, [{}]);\r\n *\r\n *   return (\r\n *     <>\r\n *       <div>Times clicked: {timesClicked}</div>\r\n *       <Child onClick={handleClick} />\r\n *     </>\r\n *   );\r\n * }\r\n */\r\nexport function useDeepCallback(\r\n  callback: Parameters<typeof useCallback>[0],\r\n  dependencies: Parameters<typeof useDeepCompareRef>[0],\r\n  customCompare?: Parameters<typeof useDeepCompareRef>[1]\r\n) {\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  return useCallback(callback, useDeepCompareRef(dependencies, customCompare));\r\n}\r\n","import { useRef } from \"react\";\r\nimport isEqual from \"lodash/isEqual\";\r\n\r\ntype DependencyList = readonly unknown[];\r\ntype Comparator = (a: DependencyList, b: DependencyList) => boolean;\r\n\r\n/**\r\n * Allows for custom or deep comparison of a dependency list. Useful to keep a consistent dependency\r\n * list across reference changes.\r\n * @param dependencies A dependency array similar to React's useEffect / useCallback / useMemo\r\n * @param comparator An optional function to compare dependencies that'll default to a deep comparison\r\n * @returns A dependency list\r\n * @see {@link https://github.com/Shopify/polaris-react/blob/master/src/utilities/use-deep-effect.tsx}\r\n * @see {@link https://github.com/Shopify/polaris-react/blob/master/src/utilities/use-deep-callback.tsx}\r\n * @example\r\n * function useDeepEffectExample(callback, dependencies, customCompare) {\r\n *  useEffect(callback, useDeepCompareRef(dependencies, customCompare));\r\n * }\r\n */\r\nexport function useDeepCompareRef(dependencies: DependencyList, comparator: Comparator = isEqual) {\r\n  const dependencyList = useRef<DependencyList>(dependencies);\r\n\r\n  if (!comparator(dependencyList.current, dependencies)) {\r\n    dependencyList.current = dependencies;\r\n  }\r\n\r\n  return dependencyList.current;\r\n}\r\n","import { useCallback } from \"react\";\r\nimport useDbApi from \"./LocalFirstDbApiHook\";\r\nimport { pokemonService } from \"services/PokemonService\";\r\nimport { Ability, Move, Moveset, Pokemon, PokemonSummary, TypeData } from \"types\";\r\nimport pokemonSummaries from \"data/pokemonSummaries\";\r\nimport { abilityService } from \"services/AbilityService\";\r\nimport { moveService } from \"services/MoveService\";\r\nimport { movesetService } from \"services/MovesetService\";\r\nimport { useDeepCallback } from \"utils/useDeepCallback\";\r\nimport { typeService } from \"services/TypeService\";\r\n\r\ninterface IPokemonApi {\r\n  getAllPokemonSummaries: () => PokemonSummary[];\r\n  getPokemonById: (id: number) => Promise<Pokemon>;\r\n  getPokemonSummaryById: (id: number) => PokemonSummary | null;\r\n  getAbilitiesByIds: (ids: number[]) => Promise<Ability[]>;\r\n  getMovesetById: (id: number) => Promise<Moveset>;\r\n  getMovesByIds: (ids: number[]) => Promise<Move[]>;\r\n  getAllMoves: () => Promise<Move[]>;\r\n  getTypesByIds: (ids: number[]) => Promise<TypeData[]>;\r\n}\r\n\r\nexport default function usePokemonApi(): IPokemonApi {\r\n  const pokemonDbApi = useDbApi(pokemonService);\r\n  const abilityDbApi = useDbApi(abilityService);\r\n  const moveDbApi = useDbApi(moveService);\r\n  const movesetDbApi = useDbApi(movesetService);\r\n  const typesDbApi = useDbApi(typeService);\r\n\r\n  const getAllPokemonSummaries = useCallback((): PokemonSummary[] => {\r\n    return pokemonSummaries;\r\n  }, []);\r\n\r\n  const getPokemonSummaryById = useCallback((id: number): PokemonSummary | null => {\r\n    return pokemonSummaries.find((pokemon) => pokemon.id === id) ?? null;\r\n  }, []);\r\n\r\n  const getPokemonById = useDeepCallback(\r\n    (id: number): Promise<Pokemon> => {\r\n      return pokemonDbApi.getById(id);\r\n    },\r\n    [pokemonDbApi]\r\n  );\r\n\r\n  const getAbilitiesByIds = useDeepCallback(\r\n    (ids: number[]): Promise<Ability[]> => {\r\n      return abilityDbApi.getManyByIds(ids);\r\n    },\r\n    [abilityDbApi]\r\n  );\r\n\r\n  const getMovesetById = useDeepCallback(\r\n    (id: number) => {\r\n      return movesetDbApi.getById(id);\r\n    },\r\n    [movesetDbApi]\r\n  );\r\n\r\n  const getMovesByIds = useDeepCallback(\r\n    (ids: number[]) => {\r\n      return moveDbApi.getManyByIds(ids);\r\n    },\r\n    [moveDbApi]\r\n  );\r\n\r\n  const getAllMoves = useDeepCallback(() => {\r\n    return moveDbApi.getAll();\r\n  }, [moveDbApi]);\r\n\r\n  const getTypesByIds = useDeepCallback(\r\n    (ids: number[]) => {\r\n      return typesDbApi.getManyByIds(ids);\r\n    },\r\n    [typesDbApi]\r\n  );\r\n\r\n  return {\r\n    getAllPokemonSummaries,\r\n    getPokemonById,\r\n    getPokemonSummaryById,\r\n    getAbilitiesByIds,\r\n    getMovesetById,\r\n    getMovesByIds,\r\n    getAllMoves,\r\n    getTypesByIds,\r\n  };\r\n}\r\n","import { $enum } from \"ts-enum-util\";\r\nimport { Type } from \"enums\";\r\nimport { Color, Filter } from \"types\";\r\nimport { TypeIcons as icons } from \"assets/icons\";\r\n\r\nexport function getTypeName(type: Type): string {\r\n  return $enum.mapValue(type).with({\r\n    [Type.NORMAL]: \"Normal\",\r\n    [Type.FIRE]: \"Fire\",\r\n    [Type.FIGHTING]: \"Fight\",\r\n    [Type.WATER]: \"Water\",\r\n    [Type.FLYING]: \"Flying\",\r\n    [Type.GRASS]: \"Grass\",\r\n    [Type.POISON]: \"Poison\",\r\n    [Type.ELECTRIC]: \"Electric\",\r\n    [Type.GROUND]: \"Ground\",\r\n    [Type.PSYCHIC]: \"Psychic\",\r\n    [Type.ROCK]: \"Rock\",\r\n    [Type.ICE]: \"Ice\",\r\n    [Type.BUG]: \"Bug\",\r\n    [Type.DRAGON]: \"Dragon\",\r\n    [Type.GHOST]: \"Ghost\",\r\n    [Type.DARK]: \"Dark\",\r\n    [Type.STEEL]: \"Steel\",\r\n    [Type.FAIRY]: \"Fairy\",\r\n  });\r\n}\r\n\r\nfunction getTypeColor(type: Type): Color {\r\n  const DEFAULT_TEXT_COLOR = \"#f5f5f5\";\r\n  return $enum.mapValue(type).with({\r\n    // [Type.DEFAULT]: {\r\n    //   text: \"#6e7a8a\",\r\n    //   background: \"#ccd4db\",\r\n    // },\r\n    [Type.NORMAL]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#aa9\",\r\n    },\r\n    [Type.FIRE]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#f42\",\r\n    },\r\n    [Type.FIGHTING]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#b54\",\r\n    },\r\n    [Type.WATER]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#39f\",\r\n    },\r\n    [Type.FLYING]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#89f\",\r\n    },\r\n    [Type.GRASS]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#7c5\",\r\n    },\r\n    [Type.POISON]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#a59\",\r\n    },\r\n    [Type.ELECTRIC]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#fc3\",\r\n    },\r\n    [Type.GROUND]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#db5\",\r\n    },\r\n    [Type.PSYCHIC]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#f59\",\r\n    },\r\n    [Type.ROCK]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#ba6\",\r\n    },\r\n    [Type.ICE]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#6cf\",\r\n    },\r\n    [Type.BUG]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#ab2\",\r\n    },\r\n    [Type.DRAGON]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#76e\",\r\n    },\r\n    [Type.GHOST]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#66b\",\r\n    },\r\n    [Type.DARK]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#754\",\r\n    },\r\n    [Type.STEEL]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#aab\",\r\n    },\r\n    [Type.FAIRY]: {\r\n      text: DEFAULT_TEXT_COLOR,\r\n      background: \"#e9e\",\r\n    },\r\n  });\r\n}\r\n\r\nexport function getTypeIcon(type: Type): string {\r\n  return $enum.mapValue(type).with({\r\n    [Type.NORMAL]: icons.NormalIcon,\r\n    [Type.FIRE]: icons.FireIcon,\r\n    [Type.FIGHTING]: icons.FightingIcon,\r\n    [Type.WATER]: icons.WaterIcon,\r\n    [Type.FLYING]: icons.FlyingIcon,\r\n    [Type.GRASS]: icons.GrassIcon,\r\n    [Type.POISON]: icons.PoisonIcon,\r\n    [Type.ELECTRIC]: icons.ElectricIcon,\r\n    [Type.GROUND]: icons.GroundIcon,\r\n    [Type.PSYCHIC]: icons.PsychicIcon,\r\n    [Type.ROCK]: icons.RockIcon,\r\n    [Type.ICE]: icons.IceIcon,\r\n    [Type.BUG]: icons.BugIcon,\r\n    [Type.DRAGON]: icons.DragonIcon,\r\n    [Type.GHOST]: icons.GhostIcon,\r\n    [Type.DARK]: icons.DarkIcon,\r\n    [Type.STEEL]: icons.SteelIcon,\r\n    [Type.FAIRY]: icons.FairyIcon,\r\n  });\r\n}\r\n\r\nexport function getTypeIconColor(type: Type): string {\r\n  return $enum.mapValue(type).with({\r\n    [Type.NORMAL]: \"linear-gradient(180deg, #9298a4, #a3a49e)\",\r\n    [Type.FIRE]: \"linear-gradient(180deg, #fb9b51, #fbae46)\",\r\n    [Type.FIGHTING]: \"linear-gradient(180deg, #ce4265, #e74347)\",\r\n    [Type.WATER]: \"linear-gradient(180deg, #4a90dd, #6cbde4)\",\r\n    [Type.FLYING]: \"linear-gradient(180deg, #90a7da, #a6c2f2)\",\r\n    [Type.GRASS]: \"linear-gradient(180deg, #5fbc51, #5ac178)\",\r\n    [Type.POISON]: \"linear-gradient(180deg, #a864c7, #c261d4)\",\r\n    [Type.ELECTRIC]: \"linear-gradient(180deg, #edd53e, #fbe273)\",\r\n    [Type.GROUND]: \"linear-gradient(180deg, #dc7545, #d29463)\",\r\n    [Type.PSYCHIC]: \"linear-gradient(180deg, #f66f71, #fe9f92)\",\r\n    [Type.ROCK]: \"linear-gradient(180deg, #c5b489, #d7cd90)\",\r\n    [Type.ICE]: \"linear-gradient(180deg, #70ccbd, #8cddd4)\",\r\n    [Type.BUG]: \"linear-gradient(180deg, #92bc2c, #afc836)\",\r\n    [Type.DRAGON]: \"linear-gradient(180deg, #0c69c8, #0180c7)\",\r\n    [Type.GHOST]: \"linear-gradient(180deg, #516aac, #7773d4)\",\r\n    [Type.DARK]: \"linear-gradient(180deg, #595761, #6e7587)\",\r\n    [Type.STEEL]: \"linear-gradient(180deg, #52869d, #58a6aa)\",\r\n    [Type.FAIRY]: \"linear-gradient(180deg, #ec8ce5, #f3a7e7)\",\r\n  });\r\n}\r\n\r\nexport function getTypePillColor(type: Type): string {\r\n  return $enum.mapValue(type).with({\r\n    [Type.NORMAL]: \"#9A9DA1\",\r\n    [Type.FIRE]: \"#F8A54F\",\r\n    [Type.FIGHTING]: \"#D94256\",\r\n    [Type.WATER]: \"#559EDF\",\r\n    [Type.FLYING]: \"#9BB4E8\",\r\n    [Type.GRASS]: \"#5DBE62\",\r\n    [Type.POISON]: \"#B563CE\",\r\n    [Type.ELECTRIC]: \"#EDD53F\",\r\n    [Type.GROUND]: \"#D78555\",\r\n    [Type.PSYCHIC]: \"#F87C7A\",\r\n    [Type.ROCK]: \"#CEC18C\",\r\n    [Type.ICE]: \"#7ED4C9\",\r\n    [Type.BUG]: \"#9DC130\",\r\n    [Type.DRAGON]: \"#0773C7\",\r\n    [Type.GHOST]: \"#6970C5\",\r\n    [Type.DARK]: \"#5F606D\",\r\n    [Type.STEEL]: \"#5596A4\",\r\n    [Type.FAIRY]: \"#EF97E6\",\r\n  });\r\n}\r\n\r\nexport function getTypeIconBoxShadow(type: Type): string {\r\n  return $enum.mapValue(type).with({\r\n    [Type.NORMAL]: \"rgba(93, 89, 106, 0.7)\",\r\n    [Type.FIRE]: \"rgba(254, 158, 84, 0.7)\",\r\n    [Type.FIGHTING]: \"rgba(212, 68, 93, 0.7)\",\r\n    [Type.WATER]: \"rgba(85, 159, 223, 0.7)\",\r\n    [Type.FLYING]: \"rgba(157, 181, 228, 0.7)\",\r\n    [Type.GRASS]: \"rgba(100, 185, 84, 0.7)\",\r\n    [Type.POISON]: \"rgba(163, 107, 203, 0.7)\",\r\n    [Type.ELECTRIC]: \"rgba(244, 213, 86, 0.7)\",\r\n    [Type.GROUND]: \"rgba(216, 130, 85, 0.7)\",\r\n    [Type.PSYCHIC]: \"rgba(248, 124, 122, 0.7)\",\r\n    [Type.ROCK]: \"rgba(203, 193, 148, 0.7)\",\r\n    [Type.ICE]: \"rgba(126, 212, 201, 0.7)\",\r\n    [Type.BUG]: \"rgba(152, 195, 47, 0.7)\",\r\n    [Type.DRAGON]: \"rgba(7, 109, 192  , 0.7)\",\r\n    [Type.GHOST]: \"rgba(101, 108, 198, 0.7)\",\r\n    [Type.DARK]: \"rgba(93, 89, 106, 0.7)\",\r\n    [Type.STEEL]: \"rgba(80, 148, 161, 0.7)\",\r\n    [Type.FAIRY]: \"rgba(242, 148, 233, 0.7)\",\r\n  });\r\n}\r\n\r\nconst typeNameMap: Map<string, Type> = new Map<string, Type>();\r\n(function populateTypeNameMap() {\r\n  $enum(Type).forEach((type) => {\r\n    typeNameMap.set(getTypeName(type), type);\r\n  });\r\n})();\r\n\r\nexport const TypeFilter: Filter<Type> = class {\r\n  private static DEFAULT_VALUE: string = \"All Types\";\r\n\r\n  public static getName(): string {\r\n    return \"Type\";\r\n  }\r\n\r\n  public static getValueName(type: Type | null): string {\r\n    if (type === null) {\r\n      return this.DEFAULT_VALUE;\r\n    }\r\n    return getTypeName(type);\r\n  }\r\n\r\n  public static getValues(): string[] {\r\n    return [this.DEFAULT_VALUE, ...$enum(Type).getValues().map(getTypeName)];\r\n  }\r\n\r\n  public static getTypeFromValue(value: string): Type | undefined {\r\n    return typeNameMap.get(value);\r\n  }\r\n};\r\n","export default __webpack_public_path__ + \"static/media/bug-icon.e2ff57e4.svg\";","import BugIcon from \"./bug-icon.svg\";\r\nimport DarkIcon from \"./dark-icon.svg\";\r\nimport DragonIcon from \"./dragon-icon.svg\";\r\nimport ElectricIcon from \"./electric-icon.svg\";\r\nimport FairyIcon from \"./fairy-icon.svg\";\r\nimport FightingIcon from \"./fighting-icon.svg\";\r\nimport FireIcon from \"./fire-icon.svg\";\r\nimport FlyingIcon from \"./flying-icon.svg\";\r\nimport GhostIcon from \"./ghost-icon.svg\";\r\nimport GrassIcon from \"./grass-icon.svg\";\r\nimport GroundIcon from \"./ground-icon.svg\";\r\nimport IceIcon from \"./ice-icon.svg\";\r\nimport NormalIcon from \"./normal-icon.svg\";\r\nimport PoisonIcon from \"./poison-icon.svg\";\r\nimport PsychicIcon from \"./psychic-icon.svg\";\r\nimport RockIcon from \"./rock-icon.svg\";\r\nimport SteelIcon from \"./steel-icon.svg\";\r\nimport WaterIcon from \"./water-icon.svg\";\r\n\r\nconst icons = {\r\n  BugIcon,\r\n  DarkIcon,\r\n  DragonIcon,\r\n  ElectricIcon,\r\n  FairyIcon,\r\n  FightingIcon,\r\n  FireIcon,\r\n  FlyingIcon,\r\n  GhostIcon,\r\n  GrassIcon,\r\n  GroundIcon,\r\n  IceIcon,\r\n  NormalIcon,\r\n  PoisonIcon,\r\n  PsychicIcon,\r\n  RockIcon,\r\n  SteelIcon,\r\n  WaterIcon,\r\n};\r\n\r\nexport default icons;\r\n","export default __webpack_public_path__ + \"static/media/dark-icon.d2fdfe45.svg\";","export default __webpack_public_path__ + \"static/media/dragon-icon.14defc3d.svg\";","export default __webpack_public_path__ + \"static/media/electric-icon.09f79486.svg\";","export default __webpack_public_path__ + \"static/media/fairy-icon.8e423385.svg\";","export default __webpack_public_path__ + \"static/media/fighting-icon.5d23ad69.svg\";","export default __webpack_public_path__ + \"static/media/fire-icon.7cbcd3f8.svg\";","export default __webpack_public_path__ + \"static/media/flying-icon.609d0c30.svg\";","export default __webpack_public_path__ + \"static/media/ghost-icon.9edd743f.svg\";","export default __webpack_public_path__ + \"static/media/grass-icon.43212e5f.svg\";","export default __webpack_public_path__ + \"static/media/ground-icon.d4cabb1d.svg\";","export default __webpack_public_path__ + \"static/media/ice-icon.885d3191.svg\";","export default __webpack_public_path__ + \"static/media/normal-icon.5fe24fe3.svg\";","export default __webpack_public_path__ + \"static/media/poison-icon.f6f56f34.svg\";","export default __webpack_public_path__ + \"static/media/psychic-icon.287bf78a.svg\";","export default __webpack_public_path__ + \"static/media/rock-icon.b00c72f8.svg\";","export default __webpack_public_path__ + \"static/media/steel-icon.38d31cf0.svg\";","export default __webpack_public_path__ + \"static/media/water-icon.e336137a.svg\";","import Pokeball from \"./pokeball.svg\";\r\nimport Search from \"./search.svg\";\r\n\r\nconst icons = {\r\n  Pokeball,\r\n  Search,\r\n};\r\n\r\nexport default icons;\r\n","export default __webpack_public_path__ + \"static/media/pokeball.5923c0fd.svg\";","export default __webpack_public_path__ + \"static/media/search.52546fd3.svg\";"],"sourceRoot":""}