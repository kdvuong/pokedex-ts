{"version":3,"sources":["services/TypeService.ts","services/PokemonService.ts","services/AbilityService.ts","services/MoveService.ts","services/MovesetService.ts","services/EvolutionService.ts","services/AuthService.ts","router/paths.tsx","router/links.tsx","router/RouteWithSubRoutes.tsx","router/Router.tsx","contexts/Drawer.context.tsx","components/navs/ResponsiveDrawer.tsx","hooks/DrawerHook.ts","App.tsx","hooks/SyncPokemonDataHook.ts","components/views/index.tsx","components/pokemon/list/PokemonListViewWrapper.tsx","components/move/list/MoveListViewWrapper.tsx","components/ability/list/AbilityListViewWrapper.tsx","components/type/list/TypeListViewWrapper.tsx","components/nature/list/NatureListViewWrapper.tsx","components/pokemon/detail/PokemonDetailViewWrapper.tsx","router/config.tsx","serviceWorker.ts","index.tsx","enums/index.tsx","constants/cloudant.config.ts","services/PokemonDbService.ts","hooks/LocalFirstDbApiHook.ts"],"names":["typeService","DbService","DbName","POKEMON_TYPES","pokemonService","POKEMONS","abilityService","POKEMON_ABILITIES","moveService","POKEMON_MOVES","movesetService","POKEMON_MOVESET","evolutionService","POKEMON_EVOLUTIONS","BASE_URL","SIGNIN_URL","this","RENEW_URL","accessToken","signin","googleAccessToken","a","fetch","method","headers","Accept","body","JSON","stringify","credentials","res","json","ok","setAccessToken","signout","renewToken","getAccessToken","s","POKEDEX_LINK","path","paths","name","MOVEDEX_LINK","ABILITYDEX_LINK","TYPEDEX_LINK","NATUREDEX_LINK","DEX_LIST","RouteWithSubRoutes","route","fallback","render","props","redirect","to","private","component","routes","Router","map","DRAWER_DEFAULT_VALUE","isToolbarVisible","currentLink","showToolbar","hideToolbar","setCurrentLink","link","drawerContext","createContext","withDrawerContext","Component","options","DecoratedComponent","useContext","toolbarVisible","useEffect","drawerWidth","Main","styled","main","useStyles","makeStyles","theme","createStyles","root","display","height","drawer","breakpoints","up","width","flexShrink","appBar","background","marginLeft","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","content","flexGrow","padding","appBarTitle","fontFamily","ResponsiveDrawer","classes","useTheme","React","useState","mobileOpen","setMobileOpen","handleDrawerToggle","className","Divider","List","dex","index","ListItem","button","Link","selected","ListItemIcon","ListItemText","primary","text","CssBaseline","AppBar","position","elevation","Toolbar","IconButton","color","aria-label","edge","onClick","Typography","variant","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","App","setIsToolbarVisible","useCallback","useDrawer","sync","pokemonDbApi","useDbApi","evolutionDbApi","moveDbApi","movesetDbApi","typeDbApi","abilityDbApi","start","performance","now","importantReplications","replicateToLocal","Promise","all","lessImportantReplications","console","log","useSyncPokemonData","Provider","value","PokemonListView","lazy","MoveListView","AbilityListView","TypeListView","NatureListView","PokemonDetailView","DecoratedPokemonDetailView","id","parseInt","match","params","MoveDetailView","AbilityDetailView","TypeDetailView","NatureDetailView","exact","views","Boolean","window","location","hostname","ReactDOM","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","Type","Generation","LearnType","SortDirection","DamageClass","auth","username","password","PouchDB","plugin","PouchLoad","require","PokemonDbService","dbName","url","local","remote","putIfNotExists","_id","get","numFiles","checkReplicated","file","replications","i","push","load","replace","markReplicated","db","docId","toString","docIds","allDocs","include_docs","keys","rows","every","row","doc","Error","info","doc_count","length","orderBy","doLocalFirst","dbFun","dbService","getLocal","getRemote","useLocalFirstDbApi","service","fileCount","replicate","getById","getManyByIds","ids","getAll"],"mappings":"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","file":"static/js/main.6bf437c9.chunk.js","sourcesContent":["import DbService, { Document } from \"./PokemonDbService\";\r\nimport { DbName } from \"enums\";\r\nimport { TypeData } from \"types\";\r\n\r\nexport interface TypeDocument extends Document, TypeData {}\r\n\r\nexport const typeService = new DbService<TypeDocument>(DbName.POKEMON_TYPES);\r\n","import DbService, { Document } from \"./PokemonDbService\";\r\nimport { DbName } from \"enums\";\r\nimport { Pokemon } from \"types\";\r\n\r\nexport interface PokemonDocument extends Document, Pokemon {}\r\n\r\nexport const pokemonService = new DbService<PokemonDocument>(DbName.POKEMONS);\r\n","import DbService, { Document } from \"./PokemonDbService\";\r\nimport { DbName } from \"enums\";\r\nimport { Ability } from \"types\";\r\n\r\nexport interface AbilityDocument extends Document, Ability {}\r\n\r\nexport const abilityService = new DbService<AbilityDocument>(DbName.POKEMON_ABILITIES);\r\n","import DbService, { Document } from \"./PokemonDbService\";\r\nimport { DbName, Type } from \"enums\";\r\nimport { Move } from \"types\";\r\n\r\ninterface MoveDocument extends Document, Move {}\r\n\r\nexport const moveService = new DbService<MoveDocument>(DbName.POKEMON_MOVES);\r\n","import DbService, { Document } from \"./PokemonDbService\";\r\nimport { DbName } from \"enums\";\r\nimport { Moveset } from \"types\";\r\n\r\ninterface MovesetDocument extends Document, Moveset {}\r\n\r\nexport const movesetService = new DbService<MovesetDocument>(DbName.POKEMON_MOVESET);\r\n","import DbService, { Document } from \"./PokemonDbService\";\r\nimport { DbName } from \"enums\";\r\n\r\ninterface EvolutionDocument extends Document {\r\n  chain: {\r\n    evolutionDetails: {\r\n      gender: string | null;\r\n      held_item: string | null;\r\n      known_move: string | null;\r\n      known_move_type: string | null;\r\n      location: string | null;\r\n      min_affection: number | null;\r\n      min_beauty: number | null;\r\n      min_happiness: number | null;\r\n      min_level: number | null;\r\n      needs_overworld_rain: boolean;\r\n      party_species: string | null;\r\n      party_type: string | null;\r\n      relative_physical_traits: string | null;\r\n      time_of_day: string;\r\n      trade_species: string | null;\r\n      trigger: string | null;\r\n    }[];\r\n    name: string;\r\n  }[];\r\n}\r\n\r\nexport const evolutionService = new DbService<EvolutionDocument>(\r\n  DbName.POKEMON_EVOLUTIONS\r\n);\r\n","class AuthService {\r\n  private readonly BASE_URL = \"http://localhost:5000\";\r\n  private readonly SIGNIN_URL = `${this.BASE_URL}/signin`;\r\n  private readonly RENEW_URL = `${this.BASE_URL}/renew-token`;\r\n  private accessToken: string = \"\";\r\n\r\n  signin = async (googleAccessToken: string): Promise<boolean> => {\r\n    let res = await fetch(this.SIGNIN_URL, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ accessToken: googleAccessToken }),\r\n      credentials: \"include\",\r\n    });\r\n\r\n    const json: any = await res.json();\r\n    if (json.ok) {\r\n      this.setAccessToken(json.accessToken);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  signout = () => {};\r\n\r\n  renewToken = async (): Promise<boolean> => {\r\n    let res = await fetch(this.RENEW_URL, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      credentials: \"include\",\r\n    });\r\n    const json: any = await res.json();\r\n    if (json.ok) {\r\n      this.setAccessToken(json.accessToken);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  getAccessToken = (): string => {\r\n    return this.accessToken;\r\n  };\r\n\r\n  setAccessToken = (s: string) => {\r\n    this.accessToken = s;\r\n  };\r\n}\r\nexport default new AuthService();\r\n","// pokemons\r\nconst POKEMON_LIST = \"/pokemons\";\r\nconst POKEMON_DETAIL = \"/pokemons/:id\";\r\n\r\n// moves\r\nconst MOVE_LIST = \"/moves\";\r\nconst MOVE_DETAIL = \"/moves/:id\";\r\n\r\n// abilities\r\nconst ABILITY_LIST = \"/abilities\";\r\nconst ABILITY_DETAIL = \"/abilities/:id\";\r\n\r\n// types\r\nconst TYPE_LIST = \"/types\";\r\nconst TYPE_DETAIL = \"/types/:id\";\r\n\r\n// natures\r\nconst NATURE_LIST = \"/natures\";\r\nconst NATURE_DETAIL = \"/natures/:id\";\r\n\r\nexport default {\r\n  POKEMON_LIST,\r\n  POKEMON_DETAIL,\r\n  MOVE_LIST,\r\n  MOVE_DETAIL,\r\n  ABILITY_LIST,\r\n  ABILITY_DETAIL,\r\n  TYPE_LIST,\r\n  TYPE_DETAIL,\r\n  NATURE_LIST,\r\n  NATURE_DETAIL,\r\n};\r\n","import paths from \"./paths\";\r\n\r\nexport interface ILink {\r\n  path: string;\r\n  name: string;\r\n}\r\n\r\nexport const POKEDEX_LINK: ILink = {\r\n  path: paths.POKEMON_LIST,\r\n  name: \"Pokedex\",\r\n};\r\n\r\nexport const MOVEDEX_LINK: ILink = {\r\n  path: paths.MOVE_LIST,\r\n  name: \"Move Dex\",\r\n};\r\n\r\nexport const ABILITYDEX_LINK: ILink = {\r\n  path: paths.ABILITY_LIST,\r\n  name: \"Ability Dex\",\r\n};\r\n\r\nexport const TYPEDEX_LINK: ILink = {\r\n  path: paths.TYPE_LIST,\r\n  name: \"Type Dex\",\r\n};\r\n\r\nexport const NATUREDEX_LINK: ILink = {\r\n  path: paths.NATURE_LIST,\r\n  name: \"Nature Dex\",\r\n};\r\n\r\nexport const DEX_LIST: ILink[] = [\r\n  POKEDEX_LINK,\r\n  MOVEDEX_LINK,\r\n  ABILITYDEX_LINK,\r\n  TYPEDEX_LINK,\r\n  NATUREDEX_LINK,\r\n];\r\n","import React, { Suspense } from \"react\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport { IRoute } from \"./config\";\r\nconst RouteWithSubRoutes = (route: IRoute) => {\r\n  /** Authenticated flag */\r\n  const authenticated: boolean = false;\r\n\r\n  return (\r\n    <Suspense fallback={route.fallback}>\r\n      <Route\r\n        path={route.path}\r\n        render={(props: any) =>\r\n          route.redirect ? (\r\n            <Redirect to={route.redirect} />\r\n          ) : route.private ? (\r\n            authenticated ? (\r\n              route.component && (\r\n                <route.component {...props} routes={route.routes} />\r\n              )\r\n            ) : (\r\n              <Redirect to=\"/home/login\" />\r\n            )\r\n          ) : (\r\n            route.component && (\r\n              <route.component {...props} routes={route.routes} />\r\n            )\r\n          )\r\n        }\r\n      />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default RouteWithSubRoutes;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { Switch } from \"react-router\";\r\nimport { IRoute } from \"./config\";\r\nimport RouteWithSubRoutes from \"./RouteWithSubRoutes\";\r\n\r\ninterface IProps {\r\n  routes: IRoute[];\r\n}\r\n\r\nconst Router: FunctionComponent<IProps> = ({ routes }) => {\r\n  return (\r\n    <Switch>\r\n      {routes.map((route: IRoute) => (\r\n        <RouteWithSubRoutes key={route.path} {...route} />\r\n      ))}\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","import React, { createContext, FunctionComponent, useContext, useEffect } from \"react\";\r\nimport { ILink, POKEDEX_LINK } from \"router/links\";\r\n\r\nexport interface DrawerContext {\r\n  isToolbarVisible: boolean;\r\n  currentLink: ILink | null;\r\n  showToolbar: () => void;\r\n  hideToolbar: () => void;\r\n  setCurrentLink: (link: ILink | null) => void;\r\n}\r\n\r\nconst DRAWER_DEFAULT_VALUE: DrawerContext = {\r\n  isToolbarVisible: false,\r\n  currentLink: POKEDEX_LINK,\r\n  showToolbar: () => {},\r\n  hideToolbar: () => {},\r\n  setCurrentLink: (link: ILink | null) => {},\r\n};\r\n\r\nexport const drawerContext = createContext<DrawerContext>(DRAWER_DEFAULT_VALUE);\r\n\r\ninterface WithDrawerContextProps {\r\n  toolbarVisible?: boolean;\r\n  link?: ILink;\r\n}\r\n\r\nexport function withDrawerContext<P extends object = {}>(\r\n  Component: FunctionComponent<P>,\r\n  options: WithDrawerContextProps = {}\r\n) {\r\n  const DecoratedComponent = (props: P) => {\r\n    const { showToolbar, hideToolbar, setCurrentLink } = useContext(drawerContext);\r\n    const { link, toolbarVisible } = options;\r\n\r\n    useEffect(() => {\r\n      if (toolbarVisible) {\r\n        showToolbar();\r\n      } else {\r\n        hideToolbar();\r\n      }\r\n      setCurrentLink(link ?? null);\r\n\r\n      return () => {\r\n        hideToolbar();\r\n        setCurrentLink(null);\r\n      };\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return <Component {...props} />;\r\n  };\r\n\r\n  return DecoratedComponent;\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, useTheme, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport { IRoute } from \"../../router/config\";\r\nimport { DEX_LIST } from \"../../router/links\";\r\nimport Router from \"../../router/Router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { drawerContext } from \"../../contexts/Drawer.context\";\r\nimport styled from \"styled-components\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst Main = styled.main`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-flow: column;\r\n`;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n      height: \"100%\",\r\n    },\r\n    drawer: {\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n      },\r\n    },\r\n    appBar: {\r\n      background: \"#dd2020\",\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n      },\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        display: \"none\",\r\n      },\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n    appBarTitle: {\r\n      fontFamily: \"Nunito Sans\",\r\n    },\r\n  })\r\n);\r\n\r\ninterface IProps {\r\n  routes: IRoute[];\r\n}\r\n\r\nexport default function ResponsiveDrawer(props: IProps) {\r\n  const { routes } = props;\r\n  const { isToolbarVisible, currentLink } = useContext(drawerContext);\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      <List>\r\n        {DEX_LIST.map((dex, index) => (\r\n          <ListItem\r\n            button\r\n            key={dex.name}\r\n            component={Link}\r\n            to={dex.path}\r\n            selected={dex === currentLink}\r\n          >\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={dex.name} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {[\"All mail\", \"Trash\", \"Spam\"].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      {isToolbarVisible && (\r\n        <AppBar position=\"fixed\" className={classes.appBar} elevation={0}>\r\n          <Toolbar>\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              edge=\"start\"\r\n              onClick={handleDrawerToggle}\r\n              className={classes.menuButton}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography className={classes.appBarTitle} variant=\"h6\" noWrap>\r\n              {currentLink?.name}\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      )}\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <Main>\r\n        {isToolbarVisible && <div className={classes.toolbar} />}\r\n        <Router routes={routes} />\r\n      </Main>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useCallback } from \"react\";\r\nimport { ILink } from \"router/links\";\r\nimport { DrawerContext } from \"../contexts/Drawer.context\";\r\n\r\nexport const useDrawer = (): DrawerContext => {\r\n  const [isToolbarVisible, setIsToolbarVisible] = useState<boolean>(false);\r\n  const [currentLink, setCurrentLink] = useState<ILink | null>(null);\r\n\r\n  const showToolbar = useCallback(() => {\r\n    setIsToolbarVisible(true);\r\n  }, []);\r\n\r\n  const hideToolbar = useCallback(() => {\r\n    setIsToolbarVisible(false);\r\n  }, []);\r\n\r\n  return {\r\n    isToolbarVisible,\r\n    currentLink,\r\n    showToolbar,\r\n    hideToolbar,\r\n    setCurrentLink,\r\n  };\r\n};\r\n","import React, { useEffect, useState, FunctionComponent, Fragment } from \"react\";\nimport useSyncPokemonData from \"hooks/SyncPokemonDataHook\";\nimport { GoogleLogin } from \"react-google-login\";\nimport authService from \"services/AuthService\";\nimport { IRoute } from \"router/config\";\nimport ResponsiveDrawer from \"components/navs/ResponsiveDrawer\";\nimport { drawerContext } from \"contexts/Drawer.context\";\nimport { useDrawer } from \"hooks/DrawerHook\";\n\ninterface IProps {\n  routes: IRoute[];\n}\n\nconst App: FunctionComponent<IProps> = (props: IProps) => {\n  const { routes } = props;\n  const drawer = useDrawer();\n  const { sync } = useSyncPokemonData();\n  const [authenticated, setAuthenticated] = useState<boolean>(false);\n\n  useEffect(() => {\n    sync();\n    // authService.renewToken().then((isSuccess) => {\n    //   setAuthenticated(isSuccess);\n    // });\n  }, [sync]);\n\n  const handleSigninSuccess = async (res: any) => {\n    const isSuccess = await authService.signin(res.accessToken);\n    setAuthenticated(isSuccess);\n  };\n\n  return (\n    <drawerContext.Provider value={drawer}>\n      <ResponsiveDrawer routes={routes} />\n    </drawerContext.Provider>\n  );\n};\n\nexport default App;\n\n{\n  /* <div className=\"App\">\n{authenticated ? (\n  <div>Logged in</div>\n) : (\n  <GoogleLogin\n    clientId=\"232104767030-07klpmed2b3e588cte839dhqpeieub07.apps.googleusercontent.com\"\n    cookiePolicy=\"single_host_origin\"\n    onSuccess={handleSigninSuccess}\n  />\n)}\n</div> */\n}\n","import { useCallback } from \"react\";\r\nimport useDbApi from \"./LocalFirstDbApiHook\";\r\nimport { typeService } from \"services/TypeService\";\r\nimport { pokemonService } from \"services/PokemonService\";\r\nimport { evolutionService } from \"services/EvolutionService\";\r\nimport { abilityService } from \"services/AbilityService\";\r\nimport { moveService } from \"services/MoveService\";\r\nimport { movesetService } from \"services/MovesetService\";\r\n\r\ninterface ISyncPokemonData {\r\n  sync: () => void;\r\n}\r\n\r\nexport default function useSyncPokemonData(): ISyncPokemonData {\r\n  const pokemonDbApi = useDbApi(pokemonService);\r\n  const evolutionDbApi = useDbApi(evolutionService);\r\n  const moveDbApi = useDbApi(moveService);\r\n  const movesetDbApi = useDbApi(movesetService);\r\n  const typeDbApi = useDbApi(typeService);\r\n  const abilityDbApi = useDbApi(abilityService);\r\n\r\n  const replicateToLocal = useCallback(async () => {\r\n    let start = performance.now();\r\n    let importantReplications = [\r\n      pokemonDbApi.replicateToLocal(4),\r\n      typeDbApi.replicateToLocal(),\r\n      abilityDbApi.replicateToLocal(),\r\n      evolutionDbApi.replicateToLocal(2),\r\n    ];\r\n\r\n    await Promise.all(importantReplications);\r\n    let lessImportantReplications = [\r\n      moveDbApi.replicateToLocal(3),\r\n      movesetDbApi.replicateToLocal(4),\r\n    ];\r\n\r\n    await Promise.all(lessImportantReplications);\r\n\r\n    console.log(performance.now() - start);\r\n  }, [abilityDbApi, evolutionDbApi, moveDbApi, movesetDbApi, pokemonDbApi, typeDbApi]);\r\n\r\n  // const populateMoves = useCallback(\r\n  //   async (unpopulatedMoves: any[]): Promise<any> => {\r\n  //     const moves = await moveDbApi.getManyByIds(\r\n  //       unpopulatedMoves.map((move: any) => move.id)\r\n  //     );\r\n  //     return unpopulatedMoves.map((move: any, index: number) => {\r\n  //       const moveData = moves[index];\r\n  //       return {\r\n  //         ...moveData,\r\n  //         ...move,\r\n  //       };\r\n  //     });\r\n  //   },\r\n  //   [moveDbApi]\r\n  // );\r\n\r\n  // const getMovesetById = useCallback(\r\n  //   async (id: number) => {\r\n  //     try {\r\n  //       const { moves } = await movesetDbApi.getById(id);\r\n  //       const learnTypes = Object.keys(moves);\r\n\r\n  //       let promises: Promise<any>[] = [];\r\n  //       learnTypes.forEach((learnType) => {\r\n  //         promises.push(populateMoves(moves[learnType]));\r\n  //       });\r\n  //       promises = await Promise.all(promises);\r\n\r\n  //       learnTypes.forEach((learnType, index) => {\r\n  //         moves[learnType] = promises[index];\r\n  //       });\r\n\r\n  //       return moves;\r\n  //     } catch (err) {\r\n  //       console.log(err.message);\r\n  //     }\r\n  //   },\r\n  //   [movesetDbApi, populateMoves]\r\n  // );\r\n\r\n  return { sync: replicateToLocal };\r\n}\r\n","import { lazy } from \"react\";\r\nimport PokemonListView from \"../pokemon/list/PokemonListViewWrapper\";\r\nimport MoveListView from \"../move/list/MoveListViewWrapper\";\r\nimport AbilityListView from \"../ability/list/AbilityListViewWrapper\";\r\nimport TypeListView from \"../type/list/TypeListViewWrapper\";\r\nimport NatureListView from \"../nature/list/NatureListViewWrapper\";\r\nimport PokemonDetailView from \"../pokemon/detail/PokemonDetailViewWrapper\";\r\n\r\n// detail views\r\nconst MoveDetailView = lazy(() => import(\"../move/detail/MoveDetailView\"));\r\nconst AbilityDetailView = lazy(() => import(\"../ability/detail/AbilityDetailView\"));\r\nconst TypeDetailView = lazy(() => import(\"../type/detail/TypeDetailView\"));\r\nconst NatureDetailView = lazy(() => import(\"../nature/detail/NatureDetailView\"));\r\n\r\nexport default {\r\n  PokemonListView,\r\n  MoveListView,\r\n  AbilityListView,\r\n  TypeListView,\r\n  NatureListView,\r\n  PokemonDetailView,\r\n  MoveDetailView,\r\n  AbilityDetailView,\r\n  TypeDetailView,\r\n  NatureDetailView,\r\n};\r\n","import { lazy } from \"react\";\r\nimport { withDrawerContext } from \"contexts/Drawer.context\";\r\nimport { POKEDEX_LINK } from \"router/links\";\r\n\r\nexport default withDrawerContext(\r\n  lazy(() => import(\"./PokemonListView\")),\r\n  { link: POKEDEX_LINK, toolbarVisible: true }\r\n);\r\n","import { lazy } from \"react\";\r\nimport { withDrawerContext } from \"contexts/Drawer.context\";\r\nimport { MOVEDEX_LINK } from \"router/links\";\r\n\r\nexport default withDrawerContext(\r\n  lazy(() => import(\"./MoveListView\")),\r\n  { link: MOVEDEX_LINK, toolbarVisible: true }\r\n);\r\n","import { lazy } from \"react\";\r\nimport { withDrawerContext } from \"contexts/Drawer.context\";\r\nimport { ABILITYDEX_LINK } from \"router/links\";\r\n\r\nexport default withDrawerContext(\r\n  lazy(() => import(\"./AbilityListView\")),\r\n  { link: ABILITYDEX_LINK, toolbarVisible: true }\r\n);\r\n","import { lazy } from \"react\";\r\nimport { withDrawerContext } from \"contexts/Drawer.context\";\r\nimport { TYPEDEX_LINK } from \"router/links\";\r\n\r\nexport default withDrawerContext(\r\n  lazy(() => import(\"./TypeListView\")),\r\n  { link: TYPEDEX_LINK, toolbarVisible: true }\r\n);\r\n","import { lazy } from \"react\";\r\nimport { withDrawerContext } from \"contexts/Drawer.context\";\r\nimport { NATUREDEX_LINK } from \"router/links\";\r\n\r\nexport default withDrawerContext(\r\n  lazy(() => import(\"./NatureListView\")),\r\n  { link: NATUREDEX_LINK, toolbarVisible: true }\r\n);\r\n","import React, { lazy } from \"react\";\r\nimport { withDrawerContext } from \"contexts/Drawer.context\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\nconst PokemonDetailViewWrapper = <P extends RouteComponentProps>(props: P) => {\r\n  const PokemonDetailView = lazy(() => import(\"./PokemonDetailView\"));\r\n  let DecoratedPokemonDetailView = withDrawerContext(PokemonDetailView);\r\n\r\n  let id: number = parseInt((props.match.params as any).id);\r\n\r\n  return <DecoratedPokemonDetailView id={id} />;\r\n};\r\n\r\nexport default PokemonDetailViewWrapper;\r\n","import React, { ReactNode, LazyExoticComponent, ComponentType } from \"react\";\r\nimport views from \"../components/views\";\r\nimport paths from \"./paths\";\r\n\r\nexport interface IRoute {\r\n  // Path, like in basic prop\r\n  path: string;\r\n  // Exact, like in basic prop\r\n  exact: boolean;\r\n  // Preloader for lazy loading\r\n  fallback: NonNullable<ReactNode> | null;\r\n  // Lazy Loaded component\r\n  component?: ComponentType<any>;\r\n  // Sub routes\r\n  routes?: IRoute[];\r\n  // Redirect path\r\n  redirect?: string;\r\n  // If router is private, this is going to be true\r\n  private?: boolean;\r\n}\r\n\r\nexport const routes: IRoute[] = [\r\n  {\r\n    path: \"/\",\r\n    exact: true,\r\n    redirect: paths.POKEMON_LIST,\r\n    fallback: <div> Loading... </div>,\r\n  },\r\n  {\r\n    path: paths.POKEMON_LIST,\r\n    component: views.PokemonListView,\r\n    exact: true,\r\n    private: false,\r\n    fallback: <div> Loading... </div>,\r\n  },\r\n  {\r\n    path: paths.POKEMON_DETAIL,\r\n    component: views.PokemonDetailView,\r\n    exact: true,\r\n    private: false,\r\n    fallback: <div> Loading... </div>,\r\n  },\r\n  {\r\n    path: paths.MOVE_LIST,\r\n    component: views.MoveListView,\r\n    exact: true,\r\n    private: false,\r\n    fallback: <div> Loading... </div>,\r\n  },\r\n  {\r\n    path: paths.MOVE_DETAIL,\r\n    component: views.MoveDetailView,\r\n    exact: true,\r\n    private: false,\r\n    fallback: <div> Loading... </div>,\r\n  },\r\n  {\r\n    path: paths.ABILITY_LIST,\r\n    component: views.AbilityListView,\r\n    exact: true,\r\n    private: false,\r\n    fallback: <div> Loading... </div>,\r\n  },\r\n  {\r\n    path: paths.ABILITY_DETAIL,\r\n    component: views.AbilityDetailView,\r\n    exact: true,\r\n    private: false,\r\n    fallback: <div> Loading... </div>,\r\n  },\r\n  {\r\n    path: paths.TYPE_LIST,\r\n    component: views.TypeListView,\r\n    exact: true,\r\n    private: false,\r\n    fallback: <div> Loading... </div>,\r\n  },\r\n  {\r\n    path: paths.TYPE_DETAIL,\r\n    component: views.TypeDetailView,\r\n    exact: true,\r\n    private: false,\r\n    fallback: <div> Loading... </div>,\r\n  },\r\n  {\r\n    path: paths.NATURE_LIST,\r\n    component: views.NatureListView,\r\n    exact: true,\r\n    private: false,\r\n    fallback: <div> Loading... </div>,\r\n  },\r\n  {\r\n    path: paths.NATURE_DETAIL,\r\n    component: views.NatureDetailView,\r\n    exact: true,\r\n    private: false,\r\n    fallback: <div> Loading... </div>,\r\n  },\r\n];\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport \"./icons.css\";\nimport App from \"./App\";\nimport { routes } from \"./router/config\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={`${process.env.PUBLIC_URL}`}>\n      <App routes={routes} />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export enum DbName {\r\n  POKEMONS = \"pokemons\",\r\n  POKEMON_EVOLUTIONS = \"evolutions\",\r\n  POKEMON_MOVES = \"moves\",\r\n  POKEMON_MOVESET = \"movesets\",\r\n  POKEMON_TYPES = \"types\",\r\n  POKEMON_ABILITIES = \"abilities\",\r\n}\r\n\r\nexport enum Type {\r\n  NORMAL = \"normal\",\r\n  FIRE = \"fire\",\r\n  FIGHTING = \"fighting\",\r\n  WATER = \"water\",\r\n  FLYING = \"flying\",\r\n  GRASS = \"grass\",\r\n  POISON = \"poison\",\r\n  ELECTRIC = \"electric\",\r\n  GROUND = \"ground\",\r\n  PSYCHIC = \"psychic\",\r\n  ROCK = \"rock\",\r\n  ICE = \"ice\",\r\n  BUG = \"bug\",\r\n  DRAGON = \"dragon\",\r\n  GHOST = \"ghost\",\r\n  DARK = \"dark\",\r\n  STEEL = \"steel\",\r\n  FAIRY = \"fairy\",\r\n}\r\n\r\nexport enum Generation {\r\n  GEN_1 = \"generation-i\",\r\n  GEN_2 = \"generation-ii\",\r\n  GEN_3 = \"generation-iii\",\r\n  GEN_4 = \"generation-iv\",\r\n  GEN_5 = \"generation-v\",\r\n  GEN_6 = \"generation-vi\",\r\n  GEN_7 = \"generation-vii\",\r\n  GEN_8 = \"generation-viii\",\r\n}\r\n\r\nexport enum LearnType {\r\n  LEVEL_UP = \"level_up\",\r\n  MACHINE = \"machine\",\r\n  TUTOR = \"tutor\",\r\n  EGG = \"egg\",\r\n}\r\n\r\nexport enum SortDirection {\r\n  ASC = \"asc\",\r\n  DESC = \"desc\",\r\n}\r\n\r\nexport enum DamageClass {\r\n  PHYSICAL = \"physical\",\r\n  SPECIAL = \"special\",\r\n  STATUS = \"status\",\r\n}\r\n","export const auth = {\r\n  username: process.env.REACT_APP_CLOUDANT_USER,\r\n  password: process.env.REACT_APP_CLOUDANT_PASSWORD,\r\n};\r\n","import PouchDB from \"pouchdb\";\r\nimport orderBy from \"lodash-es/orderBy\";\r\nimport PouchLoad from \"pouchdb-load\";\r\nimport { auth } from \"../constants/cloudant.config\";\r\n\r\nPouchDB.plugin(PouchLoad);\r\nPouchDB.plugin(require(\"pouchdb-upsert\"));\r\n\r\nexport interface Document {\r\n  _id: string;\r\n  _rev: string;\r\n  title: string;\r\n  _attachments: any;\r\n}\r\n\r\ninterface DocumentRow<T> {\r\n  doc: T;\r\n  id: string;\r\n  key: string;\r\n  value: any;\r\n}\r\n\r\ninterface AllDocsResponse<T> {\r\n  offset: number;\r\n  total_rows: number;\r\n  rows: DocumentRow<T>[];\r\n}\r\n\r\ninterface DBInfo {\r\n  db_name: string;\r\n  doc_count: number;\r\n  update_seq: number;\r\n}\r\n\r\nexport interface IPouchDB<T> {\r\n  get: (id: string) => Promise<T>;\r\n  putIfNotExists: (doc: any) => Promise<void>;\r\n  allDocs: (options: any) => Promise<AllDocsResponse<T>>;\r\n  info: () => Promise<DBInfo>;\r\n  load: (path: string) => Promise<void>;\r\n}\r\n\r\nclass PokemonDbService<T extends Document> {\r\n  private url: string;\r\n  private name: string;\r\n  private local: IPouchDB<T>;\r\n  private remote: IPouchDB<T>;\r\n  constructor(dbName: string) {\r\n    this.url = `https://${auth.username}.cloudantnosqldb.appdomain.cloud/${dbName}`;\r\n    this.name = dbName;\r\n    this.local = new PouchDB(dbName);\r\n    this.remote = new PouchDB(this.url, { auth: auth });\r\n  }\r\n\r\n  getLocal(): IPouchDB<T> {\r\n    return this.local;\r\n  }\r\n\r\n  getRemote(): IPouchDB<T> {\r\n    return this.remote;\r\n  }\r\n\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  private async markReplicated(): Promise<void> {\r\n    await this.local.putIfNotExists({\r\n      _id: \"replicated\",\r\n    });\r\n  }\r\n\r\n  private async checkReplicated(): Promise<boolean> {\r\n    try {\r\n      await this.local.get(\"replicated\");\r\n      return true;\r\n    } catch (ignored) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async replicate(numFiles?: number): Promise<void> {\r\n    const local = this.local;\r\n    const isReplicated = await this.checkReplicated();\r\n    if (isReplicated) {\r\n      console.log(`replication already done`);\r\n      return;\r\n    }\r\n    //   console.log(`started replication`);\r\n    let file = `${process.env.PUBLIC_URL}/assets/localData/${this.name}.txt`;\r\n    if (numFiles) {\r\n      let replications = [];\r\n      for (var i = 1; i <= numFiles; i++) {\r\n        // file was broken up into smaller files\r\n        replications.push(local.load(file.replace(\".txt\", `-${i}.txt`)));\r\n      }\r\n      try {\r\n        await Promise.all(replications);\r\n        this.markReplicated();\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    } else {\r\n      try {\r\n        console.log(\"start: \" + file);\r\n        await local.load(file);\r\n        this.markReplicated();\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  async getById(db: IPouchDB<T>, docId: number): Promise<T> {\r\n    return await db.get(docId.toString());\r\n  }\r\n\r\n  async getManyByIds(db: IPouchDB<T>, docIds: number[]): Promise<T[]> {\r\n    const res = await db.allDocs({\r\n      include_docs: true,\r\n      keys: docIds.map((id) => id.toString()),\r\n    });\r\n    if (!res.rows.every((row) => row.doc)) {\r\n      throw new Error(\"doc not found\");\r\n    }\r\n    return res.rows.map((row) => row.doc);\r\n  }\r\n\r\n  async getAll(db: IPouchDB<T>): Promise<any> {\r\n    const info = await db.info();\r\n    if (info.doc_count === 0) {\r\n      //check if db (assuming local) is empty\r\n      throw new Error(\"database is empty\");\r\n    }\r\n    let res = [];\r\n    const all = await db.allDocs({ include_docs: true });\r\n    //get all documents that have id different from \"replicated\"\r\n    for (let i = 0; i < all.rows.length; i++) {\r\n      if (all.rows[i].doc._id !== \"replicated\") res.push(all.rows[i].doc);\r\n    }\r\n    //sort documents by id in ascending order\r\n    res = orderBy(res, [\"id\"], [\"asc\"]);\r\n    return res;\r\n  }\r\n}\r\n\r\nexport default PokemonDbService;\r\n","import { useCallback } from \"react\";\r\nimport DbService, { IPouchDB, Document } from \"../services/PokemonDbService\";\r\n\r\ninterface ILocalFirstDbApi<T extends Document> {\r\n  replicateToLocal: (fileCount?: number) => Promise<void>;\r\n  getById: (id: number) => Promise<T>;\r\n  getManyByIds: (ids: number[]) => Promise<T[]>;\r\n  getAll: () => Promise<T[]>;\r\n}\r\n\r\n//execute database function on local db first\r\nasync function doLocalFirst<T extends Document>(\r\n  dbFun: (db: IPouchDB<T>) => Promise<any>,\r\n  dbService: DbService<T>\r\n) {\r\n  // hit the local DB first; if it 404s, then hit the remote\r\n  try {\r\n    return await dbFun(dbService.getLocal());\r\n  } catch (err) {\r\n    return await dbFun(dbService.getRemote());\r\n  }\r\n}\r\n\r\nconst useLocalFirstDbApi = <T extends Document>(service: DbService<T>): ILocalFirstDbApi<T> => {\r\n  const replicateToLocal = useCallback(\r\n    async (fileCount?: number) => {\r\n      return service.replicate(fileCount);\r\n    },\r\n    [service]\r\n  );\r\n\r\n  const getById = useCallback(\r\n    async (id: number) => {\r\n      if (service) return await doLocalFirst((db: IPouchDB<T>) => service.getById(db, id), service);\r\n      throw new Error(\"database does not exist\");\r\n    },\r\n    [service]\r\n  );\r\n\r\n  const getManyByIds = useCallback(\r\n    async (ids: number[]) => {\r\n      if (service)\r\n        return await doLocalFirst((db: IPouchDB<T>) => service.getManyByIds(db, ids), service);\r\n      throw new Error(\"database does not exist\");\r\n    },\r\n    [service]\r\n  );\r\n\r\n  const getAll = useCallback(async (): Promise<any> => {\r\n    if (service) {\r\n      return await doLocalFirst((db: IPouchDB<T>) => service.getAll(db), service);\r\n    }\r\n    throw new Error(\"database does not exist\");\r\n  }, [service]);\r\n\r\n  return {\r\n    replicateToLocal,\r\n    getById,\r\n    getManyByIds,\r\n    getAll,\r\n  };\r\n};\r\n\r\nexport default useLocalFirstDbApi;\r\n"],"sourceRoot":""}